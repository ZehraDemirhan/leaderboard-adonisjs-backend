import "../chunk-PZ5AY32C.js";

// providers/redis_provider.ts
var RedisProvider = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * Define repl bindings
   */
  async defineReplBindings() {
    if (this.app.getEnvironment() !== "repl") {
      return;
    }
    const { defineReplBindings } = await import("../repl_bindings-TSQ2Y3GO.js");
    defineReplBindings(this.app, await this.app.container.make("repl"));
  }
  /**
   * Register the Redis manager as a singleton with the
   * container
   */
  register() {
    this.app.container.singleton("redis", async () => {
      const { default: RedisManager } = await import("../redis_manager-54MMY4BQ.js");
      const config = this.app.config.get("redis", {});
      const logger = await this.app.container.make("logger");
      return new RedisManager(config, logger);
    });
  }
  /**
   * Defining repl bindings on boot
   */
  async boot() {
    await this.defineReplBindings();
  }
  /**
   * Gracefully shutdown connections when app goes down
   */
  async shutdown() {
    const redis = await this.app.container.make("redis");
    await redis.quitAll();
  }
};
export {
  RedisProvider as default
};
//# sourceMappingURL=redis_provider.js.map