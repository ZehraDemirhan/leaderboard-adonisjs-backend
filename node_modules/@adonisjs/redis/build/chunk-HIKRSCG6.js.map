{"version":3,"sources":["../src/redis_manager.ts","../src/debug.ts","../src/connections/io_methods.ts","../src/connections/redis_connection.ts","../src/connections/abstract_connection.ts","../src/connections/redis_cluster_connection.ts"],"sourcesContent":["/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Emittery from 'emittery'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { Logger } from '@adonisjs/core/logger'\nimport { type ClusterOptions, type RedisOptions, Redis } from 'ioredis'\n\nimport debug from './debug.js'\nimport { baseMethods } from './connections/io_methods.js'\nimport RedisConnection from './connections/redis_connection.js'\nimport RedisClusterConnection from './connections/redis_cluster_connection.js'\nimport type {\n  GetConnectionType,\n  IORedisBaseCommands,\n  PubSubChannelHandler,\n  PubSubPatternHandler,\n  RedisConnectionsList,\n} from './types.js'\n\n/**\n * Redis Manager exposes the API to manage multiple redis connections\n * based upon user defined config.\n *\n * All connections are long-lived until they are closed explictly\n */\nclass RedisManager<ConnectionsList extends RedisConnectionsList> extends Emittery<{\n  connection: RedisConnection | RedisClusterConnection\n}> {\n  /**\n   * Lua scripts to apply to all the connections\n   */\n  #scripts: Record<\n    string,\n    {\n      lua: string\n      numberOfKeys?: number\n      readOnly?: boolean\n    }\n  > = {}\n\n  #logger: Logger\n\n  /**\n   * Should we log redis errors or not\n   */\n  #shouldLogRedisErrors: boolean = true\n\n  /**\n   * The default error reporter we use to log redis errors\n   */\n  #errorReporter = function logRedisError(\n    this: RedisManager<ConnectionsList>,\n    data: { error: any }\n  ) {\n    this.#logger.fatal({ err: data.error }, 'Redis connection failure')\n  }.bind(this)\n\n  /**\n   * Reference to \"import('ioredis').Redis.Command\"\n   */\n  Command = Redis.Command\n\n  /**\n   * A copy of live connections. We avoid re-creating a new connection\n   * everytime and re-use connections.\n   */\n  activeConnections: {\n    [K in keyof ConnectionsList]?: GetConnectionType<ConnectionsList, K>\n  } = {}\n\n  /**\n   * Returns the length of active connections\n   */\n  get activeConnectionsCount() {\n    return Object.keys(this.activeConnections).length\n  }\n\n  constructor(\n    public managerConfig: { connection: keyof ConnectionsList; connections: ConnectionsList },\n    logger: Logger\n  ) {\n    super()\n    this.#logger = logger\n  }\n\n  /**\n   * Merging manager scripts with the connection config\n   */\n  #mergeScripts<Config extends ClusterOptions | RedisOptions>(config: Config): Config {\n    config.scripts = Object.assign({}, config.scripts, this.#scripts)\n    return config\n  }\n\n  /**\n   * Disable error logging of redis connection errors. You must\n   * handle the errors manually, otheriwse the app will crash\n   */\n  doNotLogErrors() {\n    this.#shouldLogRedisErrors = false\n    Object.keys(this.activeConnections).forEach((name) => {\n      debug('removing error reporter from %s connection', name)\n      this.activeConnections[name]?.off('error', this.#errorReporter)\n    })\n    return this\n  }\n\n  /**\n   * Returns redis factory for a given named connection\n   */\n  connection<ConnectionName extends keyof ConnectionsList>(\n    connectionName?: ConnectionName\n  ): GetConnectionType<ConnectionsList, ConnectionName> {\n    const name = connectionName || this.managerConfig.connection\n    debug('resolving connection %s', name)\n\n    /**\n     * Return existing connection if already exists\n     */\n    if (this.activeConnections[name]) {\n      debug('reusing existing connection %s', name)\n      return this.activeConnections[name] as GetConnectionType<ConnectionsList, ConnectionName>\n    }\n\n    /**\n     * Get config for the named connection\n     */\n    const config = this.managerConfig.connections[name]\n    if (!config) {\n      throw new RuntimeException(`Redis connection \"${name.toString()}\" is not defined`)\n    }\n\n    /**\n     * Instantiate the connection based upon the config\n     */\n    debug('creating new connection %s', name)\n    const connection =\n      'clusters' in config\n        ? new RedisClusterConnection(\n            name as string,\n            config.clusters,\n            this.#mergeScripts(config.clusterOptions || {})\n          )\n        : new RedisConnection(name as string, this.#mergeScripts(config))\n\n    /**\n     * Notify about a new connection\n     */\n    this.emit('connection', connection)\n\n    /**\n     * Log errors when not disabled by the user\n     */\n    if (this.#shouldLogRedisErrors) {\n      debug('attaching error reporter to log connection errors')\n      connection.on('error', this.#errorReporter)\n      connection.on('subscriber:error', this.#errorReporter)\n    }\n\n    /**\n     * Remove connection from the list of tracked connections\n     */\n    connection.on('end', ({ connection: $connection }) => {\n      debug('%s connection closed. Removing from tracked connections list', name)\n      delete this.activeConnections[$connection.connectionName]\n    })\n\n    /**\n     * Cache the connection so that we can re-use it later\n     */\n    this.activeConnections[name] = connection as GetConnectionType<ConnectionsList, ConnectionName>\n    return connection as GetConnectionType<ConnectionsList, ConnectionName>\n  }\n\n  /**\n   * Subscribe to a given channel to receive Redis pub/sub events. A\n   * new subscriber connection will be created/managed automatically.\n   */\n  subscribe(channel: string, handler: PubSubChannelHandler): void {\n    return this.connection().subscribe(channel, handler)\n  }\n\n  /**\n   * Unsubscribe from a channel\n   */\n  unsubscribe(channel: string) {\n    return this.connection().unsubscribe(channel)\n  }\n\n  /**\n   * Make redis subscription for a pattern\n   */\n  psubscribe(pattern: string, handler: PubSubPatternHandler): void {\n    return this.connection().psubscribe(pattern, handler)\n  }\n\n  /**\n   * Unsubscribe from a given pattern\n   */\n  punsubscribe(pattern: string) {\n    return this.connection().punsubscribe(pattern)\n  }\n\n  /**\n   * Publish the pub/sub message\n   */\n  publish(\n    channel: string,\n    message: string,\n    callback: (error: Error | null | undefined, count: number | undefined) => void\n  ): void\n  publish(channel: string, message: string): Promise<number>\n  publish(\n    channel: string,\n    message: string,\n    callback?: (error: Error | null | undefined, count: number | undefined) => void\n  ) {\n    return callback\n      ? this.connection().publish(channel, message, callback)\n      : this.connection().publish(channel, message)\n  }\n\n  /**\n   * Define a custom command using LUA script. You can run the\n   * registered command using the \"runCommand\" method.\n   */\n  defineCommand(\n    name: string,\n    definition: {\n      lua: string\n      numberOfKeys?: number\n      readOnly?: boolean\n    }\n  ): this {\n    /**\n     * Apply command on existing connections\n     */\n    Object.keys(this.activeConnections).forEach((connectionName) => {\n      this.activeConnections[connectionName]?.defineCommand(name, definition)\n    })\n\n    /**\n     * Store reference to scripts for new commands\n     */\n    this.#scripts[name] = definition\n    return this\n  }\n\n  /**\n   * Run a pre registered command on the default command\n   */\n  runCommand(command: string, ...args: any[]): any {\n    return this.connection().runCommand(command, ...args)\n  }\n\n  /**\n   * Quit a named connection or the default connection when no\n   * name is defined.\n   */\n  async quit<ConnectionName extends keyof ConnectionsList>(name?: ConnectionName) {\n    const connection = this.activeConnections[name || this.managerConfig.connection]\n    if (!connection) {\n      return\n    }\n\n    return connection.quit()\n  }\n\n  /**\n   * Disconnect a named connection or the default connection when no\n   * name is defined.\n   */\n  async disconnect<ConnectionName extends keyof ConnectionsList>(name?: ConnectionName) {\n    const connection = this.activeConnections[name || this.managerConfig.connection]\n    if (!connection) {\n      return\n    }\n\n    return connection.disconnect()\n  }\n\n  /**\n   * Quit all connections\n   */\n  async quitAll(): Promise<void> {\n    await Promise.all(Object.keys(this.activeConnections).map((name) => this.quit(name)))\n  }\n\n  /**\n   * Disconnect all connections\n   */\n  async disconnectAll(): Promise<void> {\n    await Promise.all(Object.keys(this.activeConnections).map((name) => this.disconnect(name)))\n  }\n}\n\ninterface RedisManager<ConnectionsList extends RedisConnectionsList> extends IORedisBaseCommands {}\nbaseMethods.forEach((method) => {\n  ;(RedisManager.prototype as any)[method] = function redisConnectionProxyFn(...args: any[]) {\n    return this.connection()[method](...args)\n  }\n})\n\nexport default RedisManager\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\n\nexport default debuglog('adonisjs:redis')\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Redis, Cluster } from 'ioredis'\n\n/**\n * Base methods are shared by a regular Redis connection and\n * the cluster connection.\n * https://redis.github.io/ioredis/classes/Redis.html\n */\nexport const baseMethods = [\n  'acl',\n  'aclBuffer',\n  'addBuiltinCommand',\n  'append',\n  'asking',\n  'auth',\n  'bgrewriteaof',\n  'bgrewriteaofBuffer',\n  'bgsave',\n  'bitcount',\n  'bitfield',\n  'bitfield_ro',\n  'bitop',\n  'bitpos',\n  'blmove',\n  'blmoveBuffer',\n  'blmpop',\n  'blmpopBuffer',\n  'blpop',\n  'blpopBuffer',\n  'brpop',\n  'brpopBuffer',\n  'brpoplpush',\n  'brpoplpushBuffer',\n  'bzmpop',\n  'bzpopmax',\n  'bzpopmaxBuffer',\n  'bzpopmin',\n  'bzpopminBuffer',\n  'call',\n  'callBuffer',\n  'client',\n  'clientBuffer',\n  'cluster',\n  'command',\n  'config',\n  'copy',\n  'createBuiltinCommand',\n  'dbsize',\n  'decr',\n  'decrby',\n  'del',\n  'discard',\n  'dump',\n  'dumpBuffer',\n  'echo',\n  'echoBuffer',\n  'eval',\n  'eval_ro',\n  'evalsha',\n  'evalsha_ro',\n  'exec',\n  'exists',\n  'expire',\n  'expireat',\n  'expiretime',\n  'failover',\n  'fcall',\n  'fcall_ro',\n  'flushall',\n  'flushdb',\n  'function',\n  'functionBuffer',\n  'geoadd',\n  'geodist',\n  'geodistBuffer',\n  'geohash',\n  'geohashBuffer',\n  'geopos',\n  'georadius',\n  'georadius_ro',\n  'georadiusbymember',\n  'georadiusbymember_ro',\n  'geosearch',\n  'geosearchstore',\n  'get',\n  'getBuffer',\n  'getBuiltinCommands',\n  'getbit',\n  'getdel',\n  'getdelBuffer',\n  'getex',\n  'getexBuffer',\n  'getrange',\n  'getrangeBuffer',\n  'getset',\n  'getsetBuffer',\n  'hdel',\n  'hello',\n  'hexists',\n  'hget',\n  'hgetBuffer',\n  'hgetall',\n  'hgetallBuffer',\n  'hincrby',\n  'hincrbyfloat',\n  'hincrbyfloatBuffer',\n  'hkeys',\n  'hkeysBuffer',\n  'hlen',\n  'hmget',\n  'hmgetBuffer',\n  'hmset',\n  'hrandfield',\n  'hrandfieldBuffer',\n  'hscan',\n  'hscanBuffer',\n  'hscanBufferStream',\n  'hscanStream',\n  'hset',\n  'hsetnx',\n  'hstrlen',\n  'hvals',\n  'hvalsBuffer',\n  'incr',\n  'incrby',\n  'incrbyfloat',\n  'info',\n  'keys',\n  'keysBuffer',\n  'lastsave',\n  'latency',\n  'lcs',\n  'lindex',\n  'lindexBuffer',\n  'linsert',\n  'llen',\n  'lmove',\n  'lmoveBuffer',\n  'lmpop',\n  'lmpopBuffer',\n  'lolwut',\n  'lpop',\n  'lpopBuffer',\n  'lpos',\n  'lpush',\n  'lpushx',\n  'lrange',\n  'lrangeBuffer',\n  'lrem',\n  'lset',\n  'ltrim',\n  'memory',\n  'mget',\n  'mgetBuffer',\n  'migrate',\n  'module',\n  'move',\n  'mset',\n  'msetnx',\n  'multi',\n  'object',\n  'persist',\n  'pexpire',\n  'pexpireat',\n  'pexpiretime',\n  'pfadd',\n  'pfcount',\n  'pfdebug',\n  'pfmerge',\n  'pfselftest',\n  'ping',\n  'pingBuffer',\n  'pipeline',\n  'psetex',\n  'psync',\n  'pttl',\n  'pubsub',\n  'randomkey',\n  'randomkeyBuffer',\n  'readonly',\n  'readwrite',\n  'rename',\n  'renamenx',\n  'replconf',\n  'replicaof',\n  'reset',\n  'restore',\n  'restore-asking',\n  'role',\n  'rpop',\n  'rpopBuffer',\n  'rpoplpush',\n  'rpoplpushBuffer',\n  'rpush',\n  'rpushx',\n  'sadd',\n  'save',\n  'scan',\n  'scanBuffer',\n  'scard',\n  'script',\n  'sdiff',\n  'sdiffBuffer',\n  'sdiffstore',\n  'select',\n  'set',\n  'setBuffer',\n  'setbit',\n  'setex',\n  'setnx',\n  'setrange',\n  'shutdown',\n  'sinter',\n  'sinterBuffer',\n  'sintercard',\n  'sinterstore',\n  'sismember',\n  'slaveof',\n  'slowlog',\n  'smembers',\n  'smembersBuffer',\n  'smismember',\n  'smove',\n  'sort',\n  'sort_ro',\n  'spop',\n  'spopBuffer',\n  'spublish',\n  'srandmember',\n  'srandmemberBuffer',\n  'srem',\n  'sscan',\n  'sscanBuffer',\n  'sscanBufferStream',\n  'sscanStream',\n  'strlen',\n  'substr',\n  'sunion',\n  'sunionBuffer',\n  'sunionstore',\n  'swapdb',\n  'sync',\n  'time',\n  'touch',\n  'ttl',\n  'type',\n  'unlink',\n  'unwatch',\n  'wait',\n  'watch',\n  'xack',\n  'xadd',\n  'xaddBuffer',\n  'xautoclaim',\n  'xclaim',\n  'xdel',\n  'xgroup',\n  'xinfo',\n  'xlen',\n  'xpending',\n  'xrange',\n  'xrangeBuffer',\n  'xread',\n  'xreadBuffer',\n  'xreadgroup',\n  'xrevrange',\n  'xrevrangeBuffer',\n  'xsetid',\n  'xtrim',\n  'zadd',\n  'zaddBuffer',\n  'zcard',\n  'zcount',\n  'zdiff',\n  'zdiffBuffer',\n  'zdiffstore',\n  'zincrby',\n  'zincrbyBuffer',\n  'zinter',\n  'zinterBuffer',\n  'zintercard',\n  'zinterstore',\n  'zlexcount',\n  'zmpop',\n  'zmscore',\n  'zmscoreBuffer',\n  'zpopmax',\n  'zpopmaxBuffer',\n  'zpopmin',\n  'zpopminBuffer',\n  'zrandmember',\n  'zrandmemberBuffer',\n  'zrange',\n  'zrangeBuffer',\n  'zrangebylex',\n  'zrangebylexBuffer',\n  'zrangebyscore',\n  'zrangebyscoreBuffer',\n  'zrangestore',\n  'zrank',\n  'zrem',\n  'zremrangebylex',\n  'zremrangebyrank',\n  'zremrangebyscore',\n  'zrevrange',\n  'zrevrangeBuffer',\n  'zrevrangebylex',\n  'zrevrangebylexBuffer',\n  'zrevrangebyscore',\n  'zrevrangebyscoreBuffer',\n  'zrevrank',\n  'zscan',\n  'zscanBuffer',\n  'zscanBufferStream',\n  'zscanStream',\n  'zscore',\n  'zscoreBuffer',\n  'zunion',\n  'zunionBuffer',\n  'zunionstore',\n] satisfies (keyof Cluster)[]\n\n/**\n * Methods available on a non-cluster Redis\n * connection\n */\nexport const redisMethods = [\n  'acl',\n  'aclBuffer',\n  'addBuiltinCommand',\n  'append',\n  'asking',\n  'auth',\n  'bgrewriteaof',\n  'bgrewriteaofBuffer',\n  'bgsave',\n  'bitcount',\n  'bitfield',\n  'bitfield_ro',\n  'bitop',\n  'bitpos',\n  'blmove',\n  'blmoveBuffer',\n  'blmpop',\n  'blmpopBuffer',\n  'blpop',\n  'blpopBuffer',\n  'brpop',\n  'brpopBuffer',\n  'brpoplpush',\n  'brpoplpushBuffer',\n  'bzmpop',\n  'bzpopmax',\n  'bzpopmaxBuffer',\n  'bzpopmin',\n  'bzpopminBuffer',\n  'call',\n  'callBuffer',\n  'client',\n  'clientBuffer',\n  'cluster',\n  'command',\n  'config',\n  'copy',\n  'createBuiltinCommand',\n  'dbsize',\n  'decr',\n  'decrby',\n  'del',\n  'discard',\n  'dump',\n  'dumpBuffer',\n  'echo',\n  'echoBuffer',\n  'eval',\n  'eval_ro',\n  'evalsha',\n  'evalsha_ro',\n  'exec',\n  'exists',\n  'expire',\n  'expireat',\n  'expiretime',\n  'failover',\n  'fcall',\n  'fcall_ro',\n  'flushall',\n  'flushdb',\n  'function',\n  'functionBuffer',\n  'geoadd',\n  'geodist',\n  'geodistBuffer',\n  'geohash',\n  'geohashBuffer',\n  'geopos',\n  'georadius',\n  'georadius_ro',\n  'georadiusbymember',\n  'georadiusbymember_ro',\n  'geosearch',\n  'geosearchstore',\n  'get',\n  'getBuffer',\n  'getBuiltinCommands',\n  'getbit',\n  'getdel',\n  'getdelBuffer',\n  'getex',\n  'getexBuffer',\n  'getrange',\n  'getrangeBuffer',\n  'getset',\n  'getsetBuffer',\n  'hdel',\n  'hello',\n  'hexists',\n  'hget',\n  'hgetBuffer',\n  'hgetall',\n  'hgetallBuffer',\n  'hincrby',\n  'hincrbyfloat',\n  'hincrbyfloatBuffer',\n  'hkeys',\n  'hkeysBuffer',\n  'hlen',\n  'hmget',\n  'hmgetBuffer',\n  'hmset',\n  'hrandfield',\n  'hrandfieldBuffer',\n  'hscan',\n  'hscanBuffer',\n  'hscanBufferStream',\n  'hscanStream',\n  'hset',\n  'hsetnx',\n  'hstrlen',\n  'hvals',\n  'hvalsBuffer',\n  'incr',\n  'incrby',\n  'incrbyfloat',\n  'info',\n  'keys',\n  'keysBuffer',\n  'lastsave',\n  'latency',\n  'lcs',\n  'lindex',\n  'lindexBuffer',\n  'linsert',\n  'llen',\n  'lmove',\n  'lmoveBuffer',\n  'lmpop',\n  'lmpopBuffer',\n  'lolwut',\n  'lpop',\n  'lpopBuffer',\n  'lpos',\n  'lpush',\n  'lpushx',\n  'lrange',\n  'lrangeBuffer',\n  'lrem',\n  'lset',\n  'ltrim',\n  'memory',\n  'mget',\n  'mgetBuffer',\n  'migrate',\n  'module',\n  'move',\n  'mset',\n  'msetnx',\n  'multi',\n  'object',\n  'persist',\n  'pexpire',\n  'pexpireat',\n  'pexpiretime',\n  'pfadd',\n  'pfcount',\n  'pfdebug',\n  'pfmerge',\n  'pfselftest',\n  'ping',\n  'pingBuffer',\n  'pipeline',\n  'psetex',\n  'psync',\n  'pttl',\n  'pubsub',\n  'randomkey',\n  'randomkeyBuffer',\n  'readonly',\n  'readwrite',\n  'rename',\n  'renamenx',\n  'replconf',\n  'replicaof',\n  'reset',\n  'restore',\n  'restore-asking',\n  'role',\n  'rpop',\n  'rpopBuffer',\n  'rpoplpush',\n  'rpoplpushBuffer',\n  'rpush',\n  'rpushx',\n  'sadd',\n  'save',\n  'scan',\n  'scanBuffer',\n  'scard',\n  'script',\n  'sdiff',\n  'sdiffBuffer',\n  'sdiffstore',\n  'select',\n  'set',\n  'setBuffer',\n  'setbit',\n  'setex',\n  'setnx',\n  'setrange',\n  'shutdown',\n  'sinter',\n  'sinterBuffer',\n  'sintercard',\n  'sinterstore',\n  'sismember',\n  'slaveof',\n  'slowlog',\n  'smembers',\n  'smembersBuffer',\n  'smismember',\n  'smove',\n  'sort',\n  'sort_ro',\n  'spop',\n  'spopBuffer',\n  'spublish',\n  'srandmember',\n  'srandmemberBuffer',\n  'srem',\n  'sscan',\n  'sscanBuffer',\n  'sscanBufferStream',\n  'sscanStream',\n  'strlen',\n  'substr',\n  'sunion',\n  'sunionBuffer',\n  'sunionstore',\n  'swapdb',\n  'sync',\n  'time',\n  'touch',\n  'ttl',\n  'type',\n  'unlink',\n  'unwatch',\n  'wait',\n  'watch',\n  'xack',\n  'xadd',\n  'xaddBuffer',\n  'xautoclaim',\n  'xclaim',\n  'xdel',\n  'xgroup',\n  'xinfo',\n  'xlen',\n  'xpending',\n  'xrange',\n  'xrangeBuffer',\n  'xread',\n  'xreadBuffer',\n  'xreadgroup',\n  'xrevrange',\n  'xrevrangeBuffer',\n  'xsetid',\n  'xtrim',\n  'zadd',\n  'zaddBuffer',\n  'zcard',\n  'zcount',\n  'zdiff',\n  'zdiffBuffer',\n  'zdiffstore',\n  'zincrby',\n  'zincrbyBuffer',\n  'zinter',\n  'zinterBuffer',\n  'zintercard',\n  'zinterstore',\n  'zlexcount',\n  'zmpop',\n  'zmscore',\n  'zmscoreBuffer',\n  'zpopmax',\n  'zpopmaxBuffer',\n  'zpopmin',\n  'zpopminBuffer',\n  'zrandmember',\n  'zrandmemberBuffer',\n  'zrange',\n  'zrangeBuffer',\n  'zrangebylex',\n  'zrangebylexBuffer',\n  'zrangebyscore',\n  'zrangebyscoreBuffer',\n  'zrangestore',\n  'zrank',\n  'zrem',\n  'zremrangebylex',\n  'zremrangebyrank',\n  'zremrangebyscore',\n  'zrevrange',\n  'zrevrangeBuffer',\n  'zrevrangebylex',\n  'zrevrangebylexBuffer',\n  'zrevrangebyscore',\n  'zrevrangebyscoreBuffer',\n  'zrevrank',\n  'zscan',\n  'zscanBuffer',\n  'zscanBufferStream',\n  'zscanStream',\n  'zscore',\n  'zscoreBuffer',\n  'zunion',\n  'zunionBuffer',\n  'zunionstore',\n  'end',\n  'monitor',\n  'scanBufferStream',\n  'scanStream',\n] satisfies (keyof Redis)[]\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Redis, RedisOptions } from 'ioredis'\n\nimport debug from '../debug.js'\nimport { redisMethods } from './io_methods.js'\nimport { AbstractConnection } from './abstract_connection.js'\nimport type {\n  ConnectionEvents,\n  RedisConnectionConfig,\n  IORedisConnectionCommands,\n} from '../types.js'\n\n/**\n * Redis connection exposes the API to run Redis commands using `ioredis` as the\n * underlying client. The class abstracts the need of creating and managing\n * multiple pub/sub connections by hand, since it handles that internally\n * by itself.\n */\nexport class RedisConnection extends AbstractConnection<Redis, ConnectionEvents<RedisConnection>> {\n  #config: RedisOptions\n\n  /**\n   * Returns the connection mode\n   */\n  get mode() {\n    return this.ioConnection.mode\n  }\n\n  /**\n   * Returns the connection mode for the subscriber\n   * connection\n   */\n  get subscribeMode() {\n    return this.ioSubscriberConnection?.mode\n  }\n\n  constructor(connectionName: string, config: RedisConnectionConfig) {\n    debug('creating connection %s: %O', connectionName, config)\n    super(connectionName)\n    this.#config = this.#normalizeConfig(config)\n\n    this.ioConnection = new Redis(this.#config)\n    this.monitorConnection()\n  }\n\n  /**\n   * Normalizes config option to be compatible with IORedis\n   */\n  #normalizeConfig(config: RedisConnectionConfig): RedisOptions {\n    if (typeof config.port === 'string') {\n      config.port = Number(config.port)\n    }\n    return config as RedisOptions\n  }\n\n  /**\n   * Creates the subscriber connection, the [[AbstractConnection]] will\n   * invoke this method when first subscription is created.\n   */\n  protected makeSubscriberConnection() {\n    debug('creating subscriber connection')\n    this.ioSubscriberConnection = new Redis(this.#config)\n    this.monitorSubscriberConnection()\n  }\n}\n\n/**\n * Adding IORedis methods dynamically on the RedisConnection\n * class and also extending its TypeScript types\n */\nexport interface RedisConnection extends IORedisConnectionCommands {}\n\nredisMethods.forEach((method) => {\n  ;(RedisConnection.prototype as any)[method] = function redisConnectionProxyFn(...args: any[]) {\n    return this.ioConnection[method](...args)\n  }\n})\n\nexport default RedisConnection\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Emittery from 'emittery'\nimport type { Redis, Cluster } from 'ioredis'\nimport type {\n  PubSubOptions,\n  ConnectionEvents,\n  PubSubChannelHandler,\n  PubSubPatternHandler,\n} from '../types.js'\n\n/**\n * Abstract factory implements the shared functionality required by Redis cluster\n * and the normal Redis connections.\n */\nexport abstract class AbstractConnection<\n  T extends Redis | Cluster,\n  Events extends ConnectionEvents<any>,\n> extends Emittery<Events> {\n  /**\n   * Reference to the main ioRedis connection\n   */\n  declare ioConnection: T\n\n  /**\n   * Reference to the main ioRedis subscriber connection\n   */\n  declare ioSubscriberConnection?: T\n\n  /**\n   * A list of active subscriptions and pattern subscription\n   */\n  protected subscriptions: Map<string, Set<PubSubChannelHandler>> = new Map()\n  protected psubscriptions: Map<string, Set<PubSubPatternHandler>> = new Map()\n\n  /**\n   * The last error emitted by the `error` event. We set it to `null` after\n   * the `ready` event\n   */\n  lastError?: any\n\n  /**\n   * Returns status of the main connection\n   */\n  get status() {\n    return this.ioConnection.status\n  }\n\n  /**\n   * Returns status of the subscriber connection or\n   * undefined when there is no subscriber\n   * connection\n   */\n  get subscriberStatus() {\n    return this.ioSubscriberConnection?.status\n  }\n\n  /**\n   * Get the number of commands queued in automatic pipelines.\n   * This is not available (and returns 0) until the cluster is connected and slots information have been received.\n   */\n  get autoPipelineQueueSize() {\n    return this.ioConnection.autoPipelineQueueSize\n  }\n\n  /**\n   * Returns a boolean notifying if the connection is\n   * in connecting state\n   */\n  isConnecting() {\n    return this.status === 'connecting' || this.status === 'reconnecting'\n  }\n\n  /**\n   * Returns a boolean notifying if the connection is in\n   * ready state\n   */\n  isReady() {\n    return this.status === 'ready' || this.status === 'connect'\n  }\n\n  /**\n   * Returns a boolean notifying if the connection has been closed\n   */\n  isClosed() {\n    return this.status === 'end' || this.status === 'close'\n  }\n\n  /**\n   * Parent class must implement makeSubscriberConnection\n   */\n  protected abstract makeSubscriberConnection(): void\n\n  constructor(public connectionName: string) {\n    super()\n  }\n\n  /**\n   * Monitoring the redis connection via event emitter to cleanup\n   * things properly and also notify subscribers of this class\n   */\n  protected monitorConnection() {\n    this.ioConnection.on('connect', () => this.emit('connect', { connection: this }))\n    this.ioConnection.on('wait', () => this.emit('wait', { connection: this }))\n    this.ioConnection.on('ready', () => {\n      /**\n       * We must set the error to null when server is ready for accept\n       * commands\n       */\n      this.lastError = null\n      this.emit('ready', { connection: this })\n    })\n\n    this.ioConnection.on('error', (error: any) => {\n      this.lastError = error\n      this.emit('error', { error, connection: this })\n    })\n\n    this.ioConnection.on('close', () => this.emit('close', { connection: this }))\n    this.ioConnection.on('reconnecting', (waitTime: number) =>\n      this.emit('reconnecting', { connection: this, waitTime })\n    )\n\n    /**\n     * Cluster only events\n     */\n    this.ioConnection.on('+node', (node: Redis) =>\n      this.emit('node:added', { connection: this, node })\n    )\n    this.ioConnection.on('-node', (node: Redis) =>\n      this.emit('node:removed', { connection: this, node })\n    )\n    this.ioConnection.on('node error', (error: any, address: string) => {\n      this.emit('node:error', { error, address, connection: this })\n    })\n\n    /**\n     * On end, we must cleanup client and self listeners\n     */\n    this.ioConnection.on('end', async () => {\n      this.ioConnection.removeAllListeners()\n      this.emit('end', { connection: this }).finally(() => {\n        this.clearListeners([\n          'connect',\n          'wait',\n          'ready',\n          'error',\n          'close',\n          'reconnecting',\n          'node:added',\n          'node:error',\n          'node:removed',\n          'end',\n        ])\n      })\n    })\n  }\n\n  /**\n   * Monitoring the subscriber connection via event emitter to\n   * cleanup things properly and also notify subscribers of\n   * this class.\n   */\n  protected monitorSubscriberConnection() {\n    this.ioSubscriberConnection!.on('connect', () =>\n      this.emit('subscriber:connect', { connection: this })\n    )\n    this.ioSubscriberConnection!.on('ready', () =>\n      this.emit('subscriber:ready', { connection: this })\n    )\n    this.ioSubscriberConnection!.on('error', (error: any) => {\n      this.emit('subscriber:error', { error, connection: this })\n    })\n    this.ioSubscriberConnection!.on('close', () =>\n      this.emit('subscriber:close', { connection: this })\n    )\n    this.ioSubscriberConnection!.on('reconnecting', (waitTime: number) =>\n      this.emit('subscriber:reconnecting', { connection: this, waitTime })\n    )\n\n    /**\n     * On subscriber connection end, we must clear registered\n     * subscriptions and client event listeners.\n     */\n    this.ioSubscriberConnection!.on('end', async () => {\n      this.ioSubscriberConnection!.removeAllListeners()\n      this.emit('subscriber:end', { connection: this })\n\n      /**\n       * Cleanup subscriptions\n       */\n      this.subscriptions.clear()\n      this.psubscriptions.clear()\n\n      this.ioSubscriberConnection = undefined\n      this.clearListeners([\n        'subscriber:connect',\n        'subscriber:ready',\n        'subscriber:error',\n        'subscriber:close',\n        'subscriber:reconnecting',\n        'subscriber:end',\n      ])\n    })\n  }\n\n  /**\n   * Setting up the subscriber connection. The method results\n   * in a noop when a connection already exists.\n   */\n  protected setupSubscriberConnection() {\n    if (this.ioSubscriberConnection) {\n      return\n    }\n\n    /**\n     * Ask child class to setup the subscriber connection\n     */\n    this.makeSubscriberConnection()\n\n    /**\n     * Listen for messages\n     */\n    this.ioSubscriberConnection!.on('message', (channel, message) => {\n      const handlers = this.subscriptions.get(channel)\n      if (handlers) {\n        for (const handler of handlers) {\n          handler(message)\n        }\n      }\n    })\n\n    /**\n     * Listen for pattern messages\n     */\n    this.ioSubscriberConnection!.on('pmessage', (pattern, channel, message) => {\n      const handlers = this.psubscriptions.get(pattern)\n      if (handlers) {\n        for (const handler of handlers) {\n          handler(channel, message)\n        }\n      }\n    })\n  }\n\n  /**\n   * Gracefully end the redis connection\n   */\n  async quit() {\n    await this.ioConnection.quit()\n    if (this.ioSubscriberConnection) {\n      await this.ioSubscriberConnection.quit()\n    }\n  }\n\n  /**\n   * Forcefully end the redis connection\n   */\n  async disconnect() {\n    await this.ioConnection.disconnect()\n    if (this.ioSubscriberConnection) {\n      await this.ioSubscriberConnection.disconnect()\n    }\n  }\n\n  /**\n   * Subscribe to a given channel to receive Redis pub/sub events. A\n   * new subscriber connection will be created/managed automatically.\n   */\n  subscribe(channel: string, handler: PubSubChannelHandler, options?: PubSubOptions): void {\n    /**\n     * Make the subscriber connection. The method results in a noop when\n     * subscriber connection already exists.\n     */\n    this.setupSubscriberConnection()\n\n    /**\n     * If the subscriptions map is empty, it means we have no active subscriptions\n     * on the given channel, hence we should make one subscription and also set\n     * the subscription handler.\n     */\n    this.ioSubscriberConnection!.subscribe(channel)\n      .then((count) => {\n        if (options?.onSubscription) {\n          options?.onSubscription(count as number)\n        }\n        this.emit('subscription:ready', { count: count as number, connection: this })\n        const subscriptions = this.subscriptions.get(channel)\n        if (subscriptions) {\n          subscriptions.add(handler)\n        } else {\n          this.subscriptions.set(channel, new Set([handler]))\n        }\n      })\n      .catch((error) => {\n        if (options?.onError) {\n          options?.onError(error)\n        }\n        this.emit('subscription:error', { error, connection: this })\n      })\n  }\n\n  /**\n   * Unsubscribe from a channel\n   */\n  unsubscribe(channel: string, handler?: PubSubChannelHandler) {\n    if (handler) {\n      const subscriptions = this.subscriptions.get(channel)\n      if (subscriptions) {\n        subscriptions.delete(handler)\n      }\n\n      if (subscriptions && subscriptions.size !== 0) {\n        return Promise.resolve()\n      }\n    } else {\n      this.subscriptions.delete(channel)\n    }\n    return this.ioSubscriberConnection!.unsubscribe(channel)\n  }\n\n  /**\n   * Make redis subscription for a pattern\n   */\n  psubscribe(pattern: string, handler: PubSubPatternHandler, options?: PubSubOptions): void {\n    /**\n     * Make the subscriber connection. The method results in a noop when\n     * subscriber connection already exists.\n     */\n    this.setupSubscriberConnection()\n\n    /**\n     * If the subscriptions map is empty, it means we have no active subscriptions\n     * on the given channel, hence we should make one subscription and also set\n     * the subscription handler.\n     */\n    this.ioSubscriberConnection!.psubscribe(pattern)\n      .then((count) => {\n        if (options?.onSubscription) {\n          options?.onSubscription(count as number)\n        }\n        this.emit('psubscription:ready', { count: count as number, connection: this })\n        const psubscriptions = this.psubscriptions.get(pattern)\n        if (psubscriptions) {\n          psubscriptions.add(handler)\n        } else {\n          this.psubscriptions.set(pattern, new Set([handler]))\n        }\n      })\n      .catch((error) => {\n        if (options?.onError) {\n          options?.onError(error)\n        }\n        this.emit('psubscription:error', { error, connection: this })\n      })\n  }\n\n  /**\n   * Unsubscribe from a given pattern\n   */\n  punsubscribe(pattern: string, handler?: PubSubPatternHandler) {\n    if (handler) {\n      const psubscriptions = this.psubscriptions.get(pattern)\n      if (psubscriptions) {\n        psubscriptions.delete(handler)\n      }\n\n      if (psubscriptions && psubscriptions.size !== 0) {\n        return Promise.resolve()\n      }\n    } else {\n      this.psubscriptions.delete(pattern)\n    }\n\n    return this.ioSubscriberConnection!.punsubscribe(pattern)\n  }\n\n  /**\n   * Publish the pub/sub message\n   */\n  publish(\n    channel: string,\n    message: string,\n    callback: (error: Error | null | undefined, count: number | undefined) => void\n  ): void\n  publish(channel: string, message: string): Promise<number>\n  publish(\n    channel: string,\n    message: string,\n    callback?: (error: Error | null | undefined, count: number | undefined) => void\n  ) {\n    return callback\n      ? this.ioConnection.publish(channel, message, callback)\n      : this.ioConnection.publish(channel, message)\n  }\n\n  /**\n   * Define a custom command using LUA script. You can run the\n   * registered command using the \"runCommand\" method.\n   */\n  defineCommand(...args: Parameters<Redis['defineCommand']>): this {\n    this.ioConnection.defineCommand(...args)\n    return this\n  }\n\n  /**\n   * Run a pre registered command\n   */\n  runCommand(command: string, ...args: any[]): any {\n    // @ts-ignore\n    return this.ioConnection[command](...args)\n  }\n}\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Redis, { type Cluster, type NodeRole } from 'ioredis'\n\nimport debug from '../debug.js'\nimport { baseMethods } from './io_methods.js'\nimport { AbstractConnection } from './abstract_connection.js'\nimport type {\n  ConnectionEvents,\n  IORedisBaseCommands,\n  RedisClusterConnectionConfig,\n} from '../types.js'\n\n/**\n * Redis cluster connection exposes the API to run Redis commands using `ioredis` as the\n * underlying client. The class abstracts the need of creating and managing multiple\n * pub/sub connections by hand, since it handles that internally by itself.\n */\nexport class RedisClusterConnection extends AbstractConnection<\n  Cluster,\n  ConnectionEvents<RedisClusterConnection>\n> {\n  #hosts: RedisClusterConnectionConfig['clusters']\n  #config: RedisClusterConnectionConfig['clusterOptions']\n\n  get slots() {\n    return this.ioConnection.slots\n  }\n\n  constructor(\n    connectionName: string,\n    hosts: RedisClusterConnectionConfig['clusters'],\n    config: RedisClusterConnectionConfig['clusterOptions']\n  ) {\n    debug('creating cluster connection %s: %O', connectionName, config)\n    super(connectionName)\n\n    this.#hosts = hosts\n    this.#config = config\n\n    this.ioConnection = new Redis.Cluster(this.#hosts as any[], this.#config)\n    this.monitorConnection()\n  }\n\n  /**\n   * Creates the subscriber connection, the [[AbstractConnection]] will\n   * invoke this method when first subscription is created.\n   */\n  protected makeSubscriberConnection() {\n    debug('creating subscriber connection')\n    this.ioSubscriberConnection = new Redis.Cluster(this.#hosts as any[], this.#config)\n    this.monitorSubscriberConnection()\n  }\n\n  /**\n   * Returns cluster nodes\n   */\n  nodes(role?: NodeRole) {\n    return this.ioConnection.nodes(role)\n  }\n}\n\n/**\n * Adding IORedis methods dynamically on the RedisClusterConnection\n * class and also extending its TypeScript types\n */\nexport interface RedisClusterConnection extends IORedisBaseCommands {}\nbaseMethods.forEach((method) => {\n  ;(RedisClusterConnection.prototype as any)[method] = function redisConnectionProxyFn(\n    ...args: any[]\n  ) {\n    return this.ioConnection[method](...args)\n  }\n})\n\nexport default RedisClusterConnection\n"],"mappings":"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","names":["Emittery","Redis","Redis","Redis","Emittery","Redis"]}