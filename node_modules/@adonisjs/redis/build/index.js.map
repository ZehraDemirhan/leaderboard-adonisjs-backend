{"version":3,"sources":["../src/errors.ts","../stubs/main.ts","../configure.ts","../src/define_config.ts","../src/checks/redis_check.ts","../src/checks/redis_memory_usage_check.ts"],"sourcesContent":["/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\n/** @deprecated */\nexport const E_MULTIPLE_REDIS_SUBSCRIPTIONS = createError<[string]>(\n  'Cannot subscribe to \"%s\" channel. Channel already has an active subscription',\n  'E_MULTIPLE_REDIS_SUBSCRIPTIONS',\n  500\n)\n\n/** @deprecated */\nexport const E_MULTIPLE_REDIS_PSUBSCRIPTIONS = createError<[string]>(\n  'Cannot subscribe to \"%s\" pattern. Pattern already has an active subscription',\n  'E_MULTIPLE_REDIS_PSUBSCRIPTIONS',\n  500\n)\n\nexport const E_INVALID_BYTES_VALUE = createError<[string | number]>(\n  'Invalid bytes value \"%s\"',\n  'E_INVALID_BYTES_VALUE',\n  500\n)\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { getDirname } from '@poppinss/utils'\n\nexport const stubsRoot = getDirname(import.meta.url)\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type Configure from '@adonisjs/core/commands/configure'\nimport { stubsRoot } from './stubs/main.js'\n\n/**\n * Configures the package\n */\nexport async function configure(command: Configure) {\n  const codemods = await command.createCodemods()\n\n  /**\n   * Publish config file\n   */\n  await codemods.makeUsingStub(stubsRoot, 'config/redis.stub', {})\n\n  /**\n   * Add environment variables\n   */\n  await codemods.defineEnvVariables({\n    REDIS_HOST: '127.0.0.1',\n    REDIS_PORT: '6379',\n    REDIS_PASSWORD: '',\n  })\n\n  /**\n   * Validate environment variables\n   */\n  await codemods.defineEnvValidations({\n    variables: {\n      REDIS_HOST: `Env.schema.string({ format: 'host' })`,\n      REDIS_PORT: 'Env.schema.number()',\n      REDIS_PASSWORD: 'Env.schema.string.optional()',\n    },\n  })\n\n  /**\n   * Add provider to rc file\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addProvider('@adonisjs/redis/redis_provider')\n  })\n}\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { RuntimeException } from '@poppinss/utils'\nimport type { RedisConnectionsList } from './types.js'\n\n/**\n * Define config for redis\n */\nexport function defineConfig<Connections extends RedisConnectionsList>(config: {\n  connection: keyof Connections\n  connections: Connections\n}): {\n  connection: keyof Connections\n  connections: Connections\n} {\n  if (!config) {\n    throw new RuntimeException('Invalid config. It must be an object')\n  }\n\n  if (!config.connections) {\n    throw new RuntimeException('Missing \"connections\" property in the redis config file')\n  }\n\n  if (!config.connection) {\n    throw new RuntimeException(\n      'Missing \"connection\" property in redis config. Specify a default connection to use'\n    )\n  }\n\n  if (!config.connections[config.connection]) {\n    throw new RuntimeException(\n      `Missing \"connections.${String(\n        config.connection\n      )}\". It is referenced by the \"default\" redis connection`\n    )\n  }\n\n  return config\n}\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { setTimeout } from 'node:timers/promises'\nimport { BaseCheck, Result } from '@adonisjs/core/health'\nimport type { HealthCheckResult } from '@adonisjs/core/types/health'\nimport type { Connection } from '../types.js'\n\n/**\n * The RedisCheck pings the redis server to ensure we are\n * able to connect to it.\n */\nexport class RedisCheck extends BaseCheck {\n  #connection: Connection\n\n  /**\n   * Number of times `ping` was deferred, at max we defer it for 3 times\n   */\n  #pingAttempts = 0\n\n  /**\n   * Health check public name\n   */\n  name: string\n\n  constructor(connection: Connection) {\n    super()\n    this.#connection = connection\n    this.name = `Redis health check (${connection.connectionName})`\n  }\n\n  /**\n   * Returns connection metadata to be shared in the health checks\n   * report\n   */\n  #getConnectionMetadata() {\n    return {\n      connection: {\n        name: this.#connection.connectionName,\n        status: this.#connection.status,\n      },\n    }\n  }\n\n  /**\n   * Internal method to ping the redis server\n   */\n  async #ping(): Promise<Result | undefined> {\n    /**\n     * When in connecting status, we should wait for maximum 3 seconds with\n     * (divided into 3 attempts). However, if there was an error, we will\n     * not wait for 3 seconds.\n     */\n    if (this.#connection.isConnecting() && this.#pingAttempts < 3 && !this.#connection.lastError) {\n      await setTimeout(1000)\n      this.#pingAttempts++\n      return this.#ping()\n    }\n\n    /**\n     * Re-connect when connection is in closed state\n     */\n    if (this.#connection.isClosed()) {\n      await this.#connection.ioConnection.connect()\n      return this.#ping()\n    }\n\n    /**\n     * If we are not in `connect` or `ready` state, then we should\n     * report an error.\n     */\n    if (!this.#connection.isReady()) {\n      return Result.failed(\n        'Unable to connect to the redis server',\n        this.#connection.lastError\n      ).mergeMetaData(this.#getConnectionMetadata())\n    }\n\n    await this.#connection.ping()\n  }\n\n  /**\n   * Executes the health check\n   */\n  async run(): Promise<HealthCheckResult> {\n    try {\n      const result = await this.#ping()\n      if (result) {\n        return result\n      }\n\n      return Result.ok('Successfully connected to the redis server').mergeMetaData(\n        this.#getConnectionMetadata()\n      )\n    } catch (error) {\n      return Result.failed(error).mergeMetaData(this.#getConnectionMetadata())\n    }\n  }\n}\n","/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { setTimeout } from 'node:timers/promises'\nimport stringHelpers from '@adonisjs/core/helpers/string'\nimport { BaseCheck, Result } from '@adonisjs/core/health'\nimport type { HealthCheckResult } from '@adonisjs/core/types/health'\nimport * as errors from '../errors.js'\n\nimport type { Connection } from '../types.js'\n\n/**\n * The RedisMemoryUsageCheck can be used to monitor the memory\n * consumption of a redis server and report a warning or error\n * after a certain threshold has been execeeded.\n */\nexport class RedisMemoryUsageCheck extends BaseCheck {\n  #connection: Connection\n\n  /**\n   * Number of times `ping` was deferred, at max we defer it for 3 times\n   */\n  #pingAttempts = 0\n\n  /**\n   * Method to compute the memory consumption\n   */\n  #computeFn: (connection: Connection) => Promise<number | null> = async (connection) => {\n    const memory = await connection.info('memory')\n\n    const memorySegment = memory\n      .split(/\\r|\\r\\n/)\n      .find((line) => line.trim().startsWith('used_memory'))\n\n    if (!memorySegment) {\n      return null\n    }\n\n    const memoryUsageInBytes = Number(memorySegment.split(':')[1])\n    return Number.isNaN(memoryUsageInBytes) ? null : memoryUsageInBytes\n  }\n\n  /**\n   * Memory consumption threshold after which a warning will be created\n   */\n  #warnThreshold: number = stringHelpers.bytes.parse('100 mb')!\n\n  /**\n   * Memory consumption threshold after which an error will be created\n   */\n  #failThreshold: number = stringHelpers.bytes.parse('120 mb')!\n\n  /**\n   * Health check public name\n   */\n  name: string\n\n  constructor(connection: Connection) {\n    super()\n    this.#connection = connection\n    this.name = `Redis memory consumption health check (${connection.connectionName})`\n  }\n\n  /**\n   * Returns connection metadata to be shared in the health checks\n   * report\n   */\n  #getConnectionMetadata() {\n    return {\n      connection: {\n        name: this.#connection.connectionName,\n        status: this.#connection.status,\n      },\n    }\n  }\n\n  /**\n   * Returns memory usage metadata to be shared in the health checks\n   * report\n   */\n  #getMemoryMetadata(used?: number) {\n    return {\n      memoryInBytes: {\n        used: used,\n        warningThreshold: this.#warnThreshold,\n        failureThreshold: this.#failThreshold,\n      },\n    }\n  }\n\n  /**\n   * Internal method to ping the redis server\n   */\n  async #ping(): Promise<Result | undefined> {\n    /**\n     * When in connecting status, we should wait for maximum 3 seconds with\n     * (divided into 3 attempts). However, if there was an error, we will\n     * not wait for 3 seconds.\n     */\n    if (this.#connection.isConnecting() && this.#pingAttempts < 3 && !this.#connection.lastError) {\n      await setTimeout(1000)\n      this.#pingAttempts++\n      return this.#ping()\n    }\n\n    /**\n     * Re-connect when connection is in closed state\n     */\n    if (this.#connection.isClosed()) {\n      await this.#connection.ioConnection.connect()\n      return this.#ping()\n    }\n\n    /**\n     * If we are not in `connect` or `ready` state, then we should\n     * report an error.\n     */\n    if (!this.#connection.isReady()) {\n      return Result.failed(\n        'Unable to connect to the redis server',\n        this.#connection.lastError\n      ).mergeMetaData(this.#getConnectionMetadata())\n    }\n\n    await this.#connection.ping()\n  }\n\n  /**\n   * Define the memory threshold after which a warning\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .warnWhenExceeds('200 mb')\n   * ```\n   */\n  warnWhenExceeds(value: string | number) {\n    const bytes = stringHelpers.bytes.parse(value)\n\n    if (bytes === null) {\n      throw new errors.E_INVALID_BYTES_VALUE([value])\n    }\n\n    this.#warnThreshold = bytes\n    return this\n  }\n\n  /**\n   * Define the memory threshold after which an error\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .warnWhenExceeds('200 mb')\n   * ```\n   */\n  failWhenExceeds(value: string | number) {\n    const bytes = stringHelpers.bytes.parse(value)\n\n    if (bytes === null) {\n      throw new errors.E_INVALID_BYTES_VALUE([value])\n    }\n\n    this.#failThreshold = bytes\n    return this\n  }\n\n  /**\n   * Define a custom callback to compute Redis memory usage. The\n   * return value must be a human readable string\n   */\n  compute(callback: (connection: Connection) => Promise<number | null>): this {\n    this.#computeFn = callback\n    return this\n  }\n\n  /**\n   * Executes the health check\n   */\n  async run(): Promise<HealthCheckResult> {\n    try {\n      const result = await this.#ping()\n      if (result) {\n        return result\n      }\n\n      /**\n       * Get memory usage when tracking memory\n       */\n      const memoryUsage = await this.#computeFn(this.#connection)\n\n      /**\n       * Return early when we do not have access to the memory\n       * usage.\n       */\n      if (!memoryUsage) {\n        return Result.failed('Check failed. Unable to get redis memory info').mergeMetaData(\n          this.#getConnectionMetadata()\n        )\n      }\n\n      const memoryUsagePretty = stringHelpers.bytes.format(memoryUsage)\n      const warnThresholdPretty = stringHelpers.bytes.format(this.#warnThreshold)\n      const failureThresholdPretty = stringHelpers.bytes.format(this.#failThreshold)\n\n      /**\n       * Check if we have crossed the failure threshold\n       */\n      if (this.#failThreshold && memoryUsage > this.#failThreshold) {\n        return Result.failed(\n          `Redis memory usage is ${memoryUsagePretty}, which is above the threshold of ${failureThresholdPretty}`\n        )\n          .mergeMetaData(this.#getConnectionMetadata())\n          .mergeMetaData(this.#getMemoryMetadata(memoryUsage))\n      }\n\n      /**\n       * Check if we have crossed the warning threshold\n       */\n      if (this.#warnThreshold && memoryUsage > this.#warnThreshold) {\n        return Result.warning(\n          `Redis memory usage is ${stringHelpers.bytes.format(memoryUsage)}, which is above the threshold of ${warnThresholdPretty}`\n        )\n          .mergeMetaData(this.#getConnectionMetadata())\n          .mergeMetaData(this.#getMemoryMetadata(memoryUsage))\n      }\n\n      return Result.ok(\n        `Redis memory usage is ${memoryUsagePretty}, which is under the defined thresholds`\n      )\n        .mergeMetaData(this.#getConnectionMetadata())\n        .mergeMetaData(this.#getMemoryMetadata(memoryUsage))\n    } catch (error) {\n      return Result.failed(error).mergeMetaData(this.#getConnectionMetadata())\n    }\n  }\n}\n"],"mappings":"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","names":["setTimeout","BaseCheck","Result","BaseCheck","setTimeout","Result"]}