import { Redis } from 'ioredis';
import { AbstractConnection } from './abstract_connection.js';
import type { ConnectionEvents, RedisConnectionConfig, IORedisConnectionCommands } from '../types.js';
/**
 * Redis connection exposes the API to run Redis commands using `ioredis` as the
 * underlying client. The class abstracts the need of creating and managing
 * multiple pub/sub connections by hand, since it handles that internally
 * by itself.
 */
export declare class RedisConnection extends AbstractConnection<Redis, ConnectionEvents<RedisConnection>> {
    #private;
    /**
     * Returns the connection mode
     */
    get mode(): "monitor" | "normal" | "subscriber";
    /**
     * Returns the connection mode for the subscriber
     * connection
     */
    get subscribeMode(): "monitor" | "normal" | "subscriber" | undefined;
    constructor(connectionName: string, config: RedisConnectionConfig);
    /**
     * Creates the subscriber connection, the [[AbstractConnection]] will
     * invoke this method when first subscription is created.
     */
    protected makeSubscriberConnection(): void;
}
/**
 * Adding IORedis methods dynamically on the RedisConnection
 * class and also extending its TypeScript types
 */
export interface RedisConnection extends IORedisConnectionCommands {
}
export default RedisConnection;
