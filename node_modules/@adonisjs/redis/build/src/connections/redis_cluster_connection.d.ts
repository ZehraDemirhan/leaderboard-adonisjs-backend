import Redis, { type Cluster, type NodeRole } from 'ioredis';
import { AbstractConnection } from './abstract_connection.js';
import type { ConnectionEvents, IORedisBaseCommands, RedisClusterConnectionConfig } from '../types.js';
/**
 * Redis cluster connection exposes the API to run Redis commands using `ioredis` as the
 * underlying client. The class abstracts the need of creating and managing multiple
 * pub/sub connections by hand, since it handles that internally by itself.
 */
export declare class RedisClusterConnection extends AbstractConnection<Cluster, ConnectionEvents<RedisClusterConnection>> {
    #private;
    get slots(): string[][];
    constructor(connectionName: string, hosts: RedisClusterConnectionConfig['clusters'], config: RedisClusterConnectionConfig['clusterOptions']);
    /**
     * Creates the subscriber connection, the [[AbstractConnection]] will
     * invoke this method when first subscription is created.
     */
    protected makeSubscriberConnection(): void;
    /**
     * Returns cluster nodes
     */
    nodes(role?: NodeRole): Redis.Redis[];
}
/**
 * Adding IORedis methods dynamically on the RedisClusterConnection
 * class and also extending its TypeScript types
 */
export interface RedisClusterConnection extends IORedisBaseCommands {
}
export default RedisClusterConnection;
